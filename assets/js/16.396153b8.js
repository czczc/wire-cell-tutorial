(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{375:function(a,t,e){"use strict";e.r(t);var s=e(44),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"coding-style-guide"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#coding-style-guide"}},[a._v("#")]),a._v(" coding style guide")]),a._v(" "),e("p",[a._v("To ensure maintainability and ease collaborative development,\nwe use "),e("code",[a._v("clang-format")]),a._v(" to guarantee code merged in "),e("code",[a._v("wire-cell-toolkit")]),a._v(" following certain conventions.\nA "),e("code",[a._v(".clang-format")]),a._v(" file is provided in the "),e("code",[a._v("wire-cell-toolkit")]),a._v(" repository.")]),a._v(" "),e("h2",{attrs:{id:"clang-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clang-format"}},[a._v("#")]),a._v(" clang-format")]),a._v(" "),e("h3",{attrs:{id:"install-clang-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-clang-format"}},[a._v("#")]),a._v(" install clang-format")]),a._v(" "),e("p",[a._v("Ubuntu:")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" clang-format\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("Mac OS:\nhttp://macappstore.org/clang-format/")]),a._v(" "),e("h3",{attrs:{id:"using-clang-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-clang-format"}},[a._v("#")]),a._v(" using clang-format")]),a._v(" "),e("p",[a._v("Format file(s) in current path, wildcard expansion is supported.\nFollowing command formats all files with "),e("code",[a._v(".cxx")]),a._v(" extension\nin current path using "),e("code",[a._v(".clang-format")]),a._v(" file ("),e("code",[a._v("-style=file")]),a._v(")\n"),e("strong",[a._v("in place")]),a._v(" ("),e("code",[a._v("-i")]),a._v(" overwrite original files)")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("clang-format -style"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("file -i *.cxx\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("Currently, "),e("code",[a._v("clang-format")]),a._v(" itself doesn't support recursive execution in subfolders.\nBut we could use other tools like "),e("code",[a._v("find")]),a._v(" to realize this.\nFollowing command finds all files in current and subfolders with extensions of\n"),e("code",[a._v(".cxx")]),a._v(", "),e("code",[a._v(".h")]),a._v(" or "),e("code",[a._v(".cu")]),a._v(" and use "),e("code",[a._v("clang-format -style=file -i")]),a._v(" to format them.")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" -regex "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'.*\\.\\(cxx\\|h\\|cu\\)'")]),a._v(" -exec clang-format -style"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("file -i "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("There are many tutorials on using "),e("code",[a._v("clang-format")]),a._v(", e.g.:\n"),e("a",{attrs:{href:"https://leimao.github.io/blog/Clang-Format-Quick-Tutorial/",target:"_blank",rel:"noopener noreferrer"}},[a._v("this one"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"example-editor-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-editor-setup"}},[a._v("#")]),a._v(" example editor setup")]),a._v(" "),e("p",[a._v("After installing "),e("code",[a._v("clang-format")]),a._v(", many editors have extensions to utilize it during editing.\nThis could be useful especially for multi-line comments, which "),e("code",[a._v("clang-format")]),a._v(" can not handle very well after editing.\nHere we provide examples for some popular editors:")]),a._v(" "),e("h3",{attrs:{id:"atom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#atom"}},[a._v("#")]),a._v(" Atom")]),a._v(" "),e("h3",{attrs:{id:"emacs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#emacs"}},[a._v("#")]),a._v(" emacs")]),a._v(" "),e("h3",{attrs:{id:"sublime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sublime"}},[a._v("#")]),a._v(" Sublime")]),a._v(" "),e("h3",{attrs:{id:"vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code"}},[a._v("#")]),a._v(" VS Code")]),a._v(" "),e("p",[a._v("Using "),e("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=xaver.clang-format",target:"_blank",rel:"noopener noreferrer"}},[a._v("this extention"),e("OutboundLink")],1),a._v(' from the "marketplace"')]),a._v(" "),e("h3",{attrs:{id:"vim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim"}},[a._v("#")]),a._v(" vim")])])}),[],!1,null,null,null);t.default=n.exports}}]);