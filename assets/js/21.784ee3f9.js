(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{381:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"explore-real-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#explore-real-data"}},[t._v("#")]),t._v(" Explore Real Data")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#get-data"}},[t._v("Get data")])]),s("li",[s("a",{attrs:{href:"#run-signal-processing"}},[t._v("Run signal processing")])]),s("li",[s("a",{attrs:{href:"#_3d-imaging-experimental"}},[t._v("3D imaging (Experimental)")])]),s("li",[s("a",{attrs:{href:"#common-issues-and-solutions"}},[t._v("Common issues and solutions")]),s("ul",[s("li",[s("a",{attrs:{href:"#i-cannot-get-data-using-ifdh"}},[t._v("I cannot get data using ifdh.")])]),s("li",[s("a",{attrs:{href:"#the-fhicl-or-jsonnet-file-cannot-be-found"}},[t._v("The fhicl or jsonnet file cannot be found.")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"get-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-data"}},[t._v("#")]),t._v(" Get data")]),t._v(" "),s("p",[t._v("Let's use "),s("strong",[t._v("ProtoDUNE-SP")]),t._v(" as an example. To look at raw data, you need to "),s("RouterLink",{attrs:{to:"/workflow.html#setup-wct-with-larsoft"}},[t._v("setup WCT with LArSoft")]),t._v(" first. Then, you can copy a data file using "),s("code",[t._v("ifdh cp -D gsiftp://url/to/raw_data .")]),t._v(" to your local directory. Note that this requires you have set up the FNAL Kerberos authentication already. Otherwise, you can "),s("code",[t._v("wget")]),t._v(" an example (~7GB) raw data file "),s("a",{attrs:{href:"https://www.phy.bnl.gov/~wgu/wire-cell-tutorial/data/np04_raw_run005145_0022_dl10.root",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(" ("),s("a",{attrs:{href:"gsiftp://fndca1.fnal.gov:2811/pnfs/fnal.gov/usr/dune/tape_backed/dunepro/protodune/np04/beam/detector/None/raw/06/61/29/25/np04_raw_run005145_0022_dl10.root"}},[t._v("gsiftp link")]),t._v(" of the same file).")],1),t._v(" "),s("p",[t._v("The raw data file has a special root format that contains larsoft objects. You can check the data structure of an event through the useful "),s("code",[t._v("eventdump.fcl")]),t._v(" command:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ lar -n1 --nskip "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -c eventdump.fcl /path/to/raw_data.root\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"run-signal-processing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-signal-processing"}},[t._v("#")]),t._v(" Run signal processing")]),t._v(" "),s("p",[t._v("The following command performs Wire-Cell signal processing on the raw data using a fhicl configuration "),s("code",[t._v("wcls-raw-to-sig.fcl")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lar -n1 -c pgrapher/experiment/pdsp/wcls-raw-to-sig.fcl /path/to/raw_data.root\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("There are two output files:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("output.root")]),t._v(": A small file that only stores the deconvoluted signals in LArSoft objects. "),s("em",[t._v("Eventdump")]),t._v(" shows its data structure:")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ lar -n1 --nskip "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -c eventdump.fcl output.root\nPROCESS NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" MODULE LABEL. "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PRODUCT "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("INSTANCE")]),t._v(" NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" DATA PRODUCT TYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" .SIZE\nDAQ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" daq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ContainerFELIX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" std::vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("artdaq::Fragment"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("?\nDAQ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" daq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ContainerTPC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" std::vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("artdaq::Fragment"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("?\nwclsraw2sig. "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" raw2sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" wiener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" std::vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("recob::Wire"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15360")]),t._v("\nwclsraw2sig. "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" tpcrawdecoder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" daq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" std::vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("raw::RawDigit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("?\nwclsraw2sig. "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" raw2sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" gauss"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" std::vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("recob::Wire"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15360")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("protodune-data-check.root")]),t._v(": A large file that records both the waveforms after noise filtering ("),s("em",[t._v("hx_raw")]),t._v(") and after deconvolution ("),s("em",[t._v("hx_gauss")]),t._v(") in TH2F. They can be looked at using simple ROOT scripts, or using the "),s("a",{attrs:{href:"https://github.com/BNLIF/Magnify-protodune",target:"_blank",rel:"noopener noreferrer"}},[t._v("Magnify"),s("OutboundLink")],1),t._v(" waveform display tool.")])]),t._v(" "),s("h2",{attrs:{id:"_3d-imaging-experimental"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3d-imaging-experimental"}},[t._v("#")]),t._v(" 3D imaging (Experimental)")]),t._v(" "),s("p",[t._v("The 3D imaging code in WCT is still under development (algorithms are being ported from the Wire-Cell Prototype) and the performance may not be optimal yet. Nonetheless, 3D imaging can be performed on the previous deconvoluted signals as follows:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lar -n1 -c pgrapher/experiment/pdsp/wcls-sig-to-img.fcl output.root\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("The obtained 3D image are saved in a json format: "),s("strong",[t._v("clusters-apa?-0000.json")]),t._v(", one per APA. You can later convert this format to fit the Bee 3D display with an independent python package "),s("strong",[t._v("wire-cell-python")]),t._v(". Note that this package runs in a "),s("a",{attrs:{href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("virtual environment"),s("OutboundLink")],1),t._v(". To setup, outside of the singularity container, do")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" python3-venv\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/WireCell/wire-cell-python.git\npython3 -m venv wcpy\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" wcpy/bin/activate\npip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" numpy vtk shapely\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" wire-cell-python\npython setup.py develop "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# first time deployment, can ignore next time")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("Now you can merge the json files into a Bee format through a python script which you can find at "),s("code",[t._v("wire-cell-python/test/wct-img-2-bee.py")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("python wct-img-2-bee.py "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'clusters-apa*.json'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("wct-img-2-bee.py is a wrapper of the original "),s("code",[t._v("wirecell-img")]),t._v(' script. You can use "-s uniform -d 10" to randomly sample each blob with 10 points per cm^3 instead of just a single blob-center point. You can also manually tell Bee the run/subrun/event numbers by adding "--rse 1 2 3".')])]),t._v(" "),s("p",[t._v("Finally, you can upload the "),s("code",[t._v("upload.zip")]),t._v(" file you just created to the "),s("a",{attrs:{href:"https://www.phy.bnl.gov/twister/bee",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bee 3D display"),s("OutboundLink")],1),t._v(". For example, "),s("a",{attrs:{href:"https://www.phy.bnl.gov/twister/bee/set/f3ee077a-756d-4aa8-bb29-cb5bdfb4cedf/event/0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(" is the 3D imaging result of the example event.")]),t._v(" "),s("h2",{attrs:{id:"common-issues-and-solutions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#common-issues-and-solutions"}},[t._v("#")]),t._v(" Common issues and solutions")]),t._v(" "),s("h3",{attrs:{id:"i-cannot-get-data-using-ifdh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-cannot-get-data-using-ifdh"}},[t._v("#")]),t._v(" I cannot get data using "),s("code",[t._v("ifdh")]),t._v(".")]),t._v(" "),s("p",[t._v("Make sure your Kerberos ticket didn't expire. Run "),s("code",[t._v("kinit your-email@FNAL.GOV")]),t._v(" first.")]),t._v(" "),s("h3",{attrs:{id:"the-fhicl-or-jsonnet-file-cannot-be-found"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-fhicl-or-jsonnet-file-cannot-be-found"}},[t._v("#")]),t._v(" The fhicl or jsonnet file cannot be found.")]),t._v(" "),s("p",[t._v("The file may not be in your "),s("code",[t._v("$FHICL_FILE_PATH")]),t._v(" or "),s("code",[t._v("$WIRECELL_PATH")]),t._v(". In particular, some of those files may only be in the "),s("code",[t._v("/wcdo/src/wct/cfg")]),t._v(" directory when people develop. Adding the following two lines to your "),s("code",[t._v("wcdo-local-myproj.rc")]),t._v(" file will help.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("WIRECELL_PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/wcdo/src/wct/cfg:"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WIRECELL_PATH")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FHICL_FILE_PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WIRECELL_PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$FHICL_FILE_PATH")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[s("strong",[t._v("TIP")]),t._v(": A bash function "),s("code",[t._v("find-fhicl")]),t._v(" is useful to locate a fhicl file. For example, "),s("code",[t._v("find-fhicl wcls-raw-to-sig.fcl")]),t._v(". You can copy this to your "),s("strong",[t._v("wcdo-local-myproj.rc")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("find-fhicl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("fhicl_file")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("path")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" $FHICL_FILE_PATH  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" -e "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/:/\\n/g'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$path")]),t._v(" -name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fhicl_file")]),t._v('"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v("/dev/null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);